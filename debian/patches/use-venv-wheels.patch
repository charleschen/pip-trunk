Description: When inside a pyvenv created virtual environment, we need to add
 all the recursively devendorized dependent wheels to sys.path so that they
 can be imported.  These should not live outside the venv (i.e. in system
 paths) in order to preserve venv isolation.
Author: Barry Warsaw <barry@debian.org>
Forwarded: not-needed

--- a/pip/__init__.py
+++ b/pip/__init__.py
@@ -171,6 +171,25 @@
     if initial_args is None:
         initial_args = sys.argv[1:]
 
+    # Debian pyvenv support.  When inside a pyvenv created virtual
+    # environment, we have to add all the devendorized wheels to sys.path from
+    # inside the venv, otherwise the devendorized packages won't be found.
+    # Only do this in a venv so it doesn't affect global pip operation.
+    # Python 2 does not have a sys.base_prefix attribute.
+    if sys.prefix != getattr(sys, 'base_prefix', sys.prefix):
+        wheel_dir = os.path.join(
+            sys.base_prefix, 'usr', 'share', 'python-wheels')
+        # We'll just add all the wheels we find.  When pyvenv initializes the
+        # venv by calling `$python -Im ensurepip`, it'll only copy the wheels
+        # needed to make pip work.
+        try:
+            for filename in os.listdir(wheel_dir):
+                if os.path.splitext(filename)[1] == '.whl':
+                    sys.path.extend(os.path.join(wheel_dir, filename))
+        except FileNotFoundError:
+            # Oh well.
+            pass
+
     autocomplete()
 
     try:
--- a/setup.py
+++ b/setup.py
@@ -41,7 +41,13 @@
 long_description = "\n" + "\n".join([read('PROJECT.txt'),
                                      read('docs', 'quickstart.rst')])
 
-tests_require = ['pytest', 'virtualenv>=1.10', 'scripttest>=1.3', 'mock']
+tests_require = ['pytest', 'scripttest>=1.3', 'mock']
+
+# In Debian, the virtualenv Build-Depends will satisfy this requirement
+# but setup() is too dumb to notice that.
+if sys.version_info < (3,):
+    tests_require.append('virtualenv>=1.10')
+
 
 setup(name="pip",
       version=find_version('pip', '__init__.py'),
