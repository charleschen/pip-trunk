Description: In Debian, we de-vendorize all bundled dependencies, placing them
 in a Debian-specific wheel directory.  The vendorized packages will be
 automatically pruned during package build.  All we need to do here is
 calculate the correct WHEEL_DIR and let pip's VendorAlias class do the rest.
Author: Barry Warsaw <barry@debian.org>
Forwarded: not-needed

--- a/setup.py
+++ b/setup.py
@@ -47,7 +47,13 @@
 
 long_description = read('README.rst')
 
-tests_require = ['pytest', 'virtualenv>=1.10', 'scripttest>=1.3', 'mock']
+tests_require = ['pytest', 'scripttest>=1.3', 'mock']
+
+# In Debian, the virtualenv Build-Depends will satisfy this requirement
+# but setup() is too dumb to notice that.
+if sys.version_info < (3,):
+    tests_require.append('virtualenv>=1.10')
+
 
 find_excludes = ["contrib", "docs", "tests*", "tasks"]
 
--- a/pip/_vendor/__init__.py
+++ b/pip/_vendor/__init__.py
@@ -11,12 +11,36 @@
 import os.path
 import sys
 
+# 2015-04-30 barry@debian.org
+#
+# Upstream pip vendorizes a bunch of its dependencies.  Debian de-vendorizes
+# (unbundles) these dependencies to be compliant with Debian policy.  Instead,
+# these dependencies are packaged as wheel (.whl) files in a known location.
+# When pip itself executes, we have to arrange for these wheels to show up
+# earlier on sys.path than any other version of these packages, otherwise
+# things can break.  See for example Bug #744145.
+#
+# The location of the wheels differs depending on whether we're inside or
+# outside a virtual environment, regardless of whether that venv was created
+# with virtualenv or pyvenv.  The first thing we have to do is figure out if
+# we're inside or outside a venv.  Then we'll set WHEEL_DIR as appropriate
+# below and let pip's VendorAlias class do the rest.
+#
+# venv determination is a bit of a black art, but this algorithm should work
+# in both Python 2 (virtualenv-only) and Python 3 (pyvenv and virtualenv).
+from pip.locations import running_under_virtualenv
+
+if running_under_virtualenv():
+    WHEEL_DIR = os.path.join(sys.prefix, 'lib', 'python-wheels')
+else:
+    WHEEL_DIR = '/usr/share/python-wheels'
+
 
 # By default, look in this directory for a bunch of .whl files which we will
 # add to the beginning of sys.path before attempting to import anything. This
 # is done to support downstream re-distributors like Debian and Fedora who
 # wish to create their own Wheels for our dependencies to aid in debundling.
-WHEEL_DIR = os.path.abspath(os.path.dirname(__file__))
+#WHEEL_DIR = os.path.abspath(os.path.dirname(__file__))
 
 # Actually look inside of WHEEL_DIR to find .whl files and add them to the
 # front of our sys.path.
